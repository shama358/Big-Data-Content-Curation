//package org.myorg;
import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.util.*;

public class DataCuration {

	public static class Map extends MapReduceBase implements 
	Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable one = new IntWritable(1);
		private Text keyWord = new Text();
		private String searchKeys="http://";   
		//A substring to help curate information from huge volume of input data 
		public void map(LongWritable key, Text value, OutputCollector<Text, 
		IntWritable> output, Reporter reporter) throws IOException {
			String line = value.toString();
			if(!line.contains(searchKeys)) // search for the given substring
			{
				return;
			}
			StringTokenizer tokenizer = new StringTokenizer(line);
			while (tokenizer.hasMoreTokens()) {
				String token = tokenizer.nextToken();
				if(token.contains(searchKeys))
				{
					keyWord.set(token);
					output.collect(keyWord, one); //output of map function
				}
			}
		}
	}

	public static class Reduce extends MapReduceBase 
	implements Reducer<Text, IntWritable, Text, IntWritable> {
		public void reduce(Text key, Iterator<IntWritable> values, 
		OutputCollector<Text, IntWritable> output, Reporter reporter) 
		throws IOException {
			int sum = 0;
			while (values.hasNext()) {
				sum += values.next().get(); 
				// aggregating the inputs provided by Map function
			}
			output.collect(key, new IntWritable(sum));
		}
	}

	public static void main(String[] args) throws Exception {
		JobConf conf = new JobConf(DataCuration.class);
		conf.setJobName("DataCuration");

		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);

		conf.setMapperClass(Map.class);
		//conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);

		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);

		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));

		JobClient.runJob(conf);
	}
}